// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: service/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoolAPIClient is the client API for PoolAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolAPIClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	ListXattr(ctx context.Context, in *ListXattrRequest, opts ...grpc.CallOption) (*ListXattrResponse, error)
	GetXattr(ctx context.Context, in *GetXattrRequest, opts ...grpc.CallOption) (*GetXattrResponse, error)
	SetXattr(ctx context.Context, in *SetXattrRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveXattr(ctx context.Context, in *RemoveXattrRequest, opts ...grpc.CallOption) (*Empty, error)
	ExistsDir(ctx context.Context, in *ExistsDirRequest, opts ...grpc.CallOption) (*ExistsDirResponse, error)
	ExistsFile(ctx context.Context, in *ExistsFileRequest, opts ...grpc.CallOption) (*ExistsFileResponse, error)
	ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	ListDirACLs(ctx context.Context, in *ListDirACLsRequest, opts ...grpc.CallOption) (*ListDirACLsResponse, error)
	ListFileACLs(ctx context.Context, in *ListFileACLsRequest, opts ...grpc.CallOption) (*ListFileACLsResponse, error)
	ListACLsForEntries(ctx context.Context, in *ListACLsForEntriesRequest, opts ...grpc.CallOption) (*ListACLsForEntriesResponse, error)
	RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveDir(ctx context.Context, in *RemoveDirRequest, opts ...grpc.CallOption) (*Empty, error)
	MakeDir(ctx context.Context, in *MakeDirRequest, opts ...grpc.CallOption) (*Empty, error)
	RenameDirToDir(ctx context.Context, in *RenameDirToDirRequest, opts ...grpc.CallOption) (*Empty, error)
	RenameFileToFile(ctx context.Context, in *RenameFileToFileRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error)
	TruncateFile(ctx context.Context, in *TruncateFileRequest, opts ...grpc.CallOption) (*Empty, error)
	// file
	GetOffset(ctx context.Context, in *GetOffsetRequest, opts ...grpc.CallOption) (*GetOffsetResponse, error)
	ReadAt(ctx context.Context, in *ReadAtRequest, opts ...grpc.CallOption) (*ReadAtResponse, error)
	WriteAt(ctx context.Context, in *WriteAtRequest, opts ...grpc.CallOption) (*Empty, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Empty, error)
	RLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Empty, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*Empty, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*Empty, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error)
	// cache
	SubscribeCacheEvents(ctx context.Context, in *SubscribeCacheEventsRequest, opts ...grpc.CallOption) (*Empty, error)
	PullCacheEvents(ctx context.Context, in *PullCacheEventsRequest, opts ...grpc.CallOption) (*PullCacheEventsResponse, error)
	UnsubscribeCacheEvents(ctx context.Context, in *UnsubscribeCacheEventsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type poolAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolAPIClient(cc grpc.ClientConnInterface) PoolAPIClient {
	return &poolAPIClient{cc}
}

func (c *poolAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ListXattr(ctx context.Context, in *ListXattrRequest, opts ...grpc.CallOption) (*ListXattrResponse, error) {
	out := new(ListXattrResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ListXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) GetXattr(ctx context.Context, in *GetXattrRequest, opts ...grpc.CallOption) (*GetXattrResponse, error) {
	out := new(GetXattrResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/GetXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) SetXattr(ctx context.Context, in *SetXattrRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/SetXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) RemoveXattr(ctx context.Context, in *RemoveXattrRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/RemoveXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ExistsDir(ctx context.Context, in *ExistsDirRequest, opts ...grpc.CallOption) (*ExistsDirResponse, error) {
	out := new(ExistsDirResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ExistsDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ExistsFile(ctx context.Context, in *ExistsFileRequest, opts ...grpc.CallOption) (*ExistsFileResponse, error) {
	out := new(ExistsFileResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ExistsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ListUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ListDirACLs(ctx context.Context, in *ListDirACLsRequest, opts ...grpc.CallOption) (*ListDirACLsResponse, error) {
	out := new(ListDirACLsResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ListDirACLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ListFileACLs(ctx context.Context, in *ListFileACLsRequest, opts ...grpc.CallOption) (*ListFileACLsResponse, error) {
	out := new(ListFileACLsResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ListFileACLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ListACLsForEntries(ctx context.Context, in *ListACLsForEntriesRequest, opts ...grpc.CallOption) (*ListACLsForEntriesResponse, error) {
	out := new(ListACLsForEntriesResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ListACLsForEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/RemoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) RemoveDir(ctx context.Context, in *RemoveDirRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/RemoveDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) MakeDir(ctx context.Context, in *MakeDirRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/MakeDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) RenameDirToDir(ctx context.Context, in *RenameDirToDirRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/RenameDirToDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) RenameFileToFile(ctx context.Context, in *RenameFileToFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/RenameFileToFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error) {
	out := new(OpenFileResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/OpenFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) TruncateFile(ctx context.Context, in *TruncateFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/TruncateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) GetOffset(ctx context.Context, in *GetOffsetRequest, opts ...grpc.CallOption) (*GetOffsetResponse, error) {
	out := new(GetOffsetResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/GetOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) ReadAt(ctx context.Context, in *ReadAtRequest, opts ...grpc.CallOption) (*ReadAtResponse, error) {
	out := new(ReadAtResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) WriteAt(ctx context.Context, in *WriteAtRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/WriteAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) RLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/RLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) SubscribeCacheEvents(ctx context.Context, in *SubscribeCacheEventsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/SubscribeCacheEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) PullCacheEvents(ctx context.Context, in *PullCacheEventsRequest, opts ...grpc.CallOption) (*PullCacheEventsResponse, error) {
	out := new(PullCacheEventsResponse)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/PullCacheEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolAPIClient) UnsubscribeCacheEvents(ctx context.Context, in *UnsubscribeCacheEventsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PoolAPI/UnsubscribeCacheEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolAPIServer is the server API for PoolAPI service.
// All implementations must embed UnimplementedPoolAPIServer
// for forward compatibility
type PoolAPIServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*Empty, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	ListXattr(context.Context, *ListXattrRequest) (*ListXattrResponse, error)
	GetXattr(context.Context, *GetXattrRequest) (*GetXattrResponse, error)
	SetXattr(context.Context, *SetXattrRequest) (*Empty, error)
	RemoveXattr(context.Context, *RemoveXattrRequest) (*Empty, error)
	ExistsDir(context.Context, *ExistsDirRequest) (*ExistsDirResponse, error)
	ExistsFile(context.Context, *ExistsFileRequest) (*ExistsFileResponse, error)
	ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error)
	ListDirACLs(context.Context, *ListDirACLsRequest) (*ListDirACLsResponse, error)
	ListFileACLs(context.Context, *ListFileACLsRequest) (*ListFileACLsResponse, error)
	ListACLsForEntries(context.Context, *ListACLsForEntriesRequest) (*ListACLsForEntriesResponse, error)
	RemoveFile(context.Context, *RemoveFileRequest) (*Empty, error)
	RemoveDir(context.Context, *RemoveDirRequest) (*Empty, error)
	MakeDir(context.Context, *MakeDirRequest) (*Empty, error)
	RenameDirToDir(context.Context, *RenameDirToDirRequest) (*Empty, error)
	RenameFileToFile(context.Context, *RenameFileToFileRequest) (*Empty, error)
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error)
	TruncateFile(context.Context, *TruncateFileRequest) (*Empty, error)
	// file
	GetOffset(context.Context, *GetOffsetRequest) (*GetOffsetResponse, error)
	ReadAt(context.Context, *ReadAtRequest) (*ReadAtResponse, error)
	WriteAt(context.Context, *WriteAtRequest) (*Empty, error)
	Lock(context.Context, *LockRequest) (*Empty, error)
	RLock(context.Context, *LockRequest) (*Empty, error)
	Unlock(context.Context, *UnlockRequest) (*Empty, error)
	Truncate(context.Context, *TruncateRequest) (*Empty, error)
	Flush(context.Context, *FlushRequest) (*Empty, error)
	Close(context.Context, *CloseRequest) (*Empty, error)
	// cache
	SubscribeCacheEvents(context.Context, *SubscribeCacheEventsRequest) (*Empty, error)
	PullCacheEvents(context.Context, *PullCacheEventsRequest) (*PullCacheEventsResponse, error)
	UnsubscribeCacheEvents(context.Context, *UnsubscribeCacheEventsRequest) (*Empty, error)
	mustEmbedUnimplementedPoolAPIServer()
}

// UnimplementedPoolAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPoolAPIServer struct {
}

func (UnimplementedPoolAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPoolAPIServer) Logout(context.Context, *LogoutRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPoolAPIServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPoolAPIServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedPoolAPIServer) ListXattr(context.Context, *ListXattrRequest) (*ListXattrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXattr not implemented")
}
func (UnimplementedPoolAPIServer) GetXattr(context.Context, *GetXattrRequest) (*GetXattrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXattr not implemented")
}
func (UnimplementedPoolAPIServer) SetXattr(context.Context, *SetXattrRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXattr not implemented")
}
func (UnimplementedPoolAPIServer) RemoveXattr(context.Context, *RemoveXattrRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveXattr not implemented")
}
func (UnimplementedPoolAPIServer) ExistsDir(context.Context, *ExistsDirRequest) (*ExistsDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsDir not implemented")
}
func (UnimplementedPoolAPIServer) ExistsFile(context.Context, *ExistsFileRequest) (*ExistsFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsFile not implemented")
}
func (UnimplementedPoolAPIServer) ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedPoolAPIServer) ListDirACLs(context.Context, *ListDirACLsRequest) (*ListDirACLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirACLs not implemented")
}
func (UnimplementedPoolAPIServer) ListFileACLs(context.Context, *ListFileACLsRequest) (*ListFileACLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileACLs not implemented")
}
func (UnimplementedPoolAPIServer) ListACLsForEntries(context.Context, *ListACLsForEntriesRequest) (*ListACLsForEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListACLsForEntries not implemented")
}
func (UnimplementedPoolAPIServer) RemoveFile(context.Context, *RemoveFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedPoolAPIServer) RemoveDir(context.Context, *RemoveDirRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDir not implemented")
}
func (UnimplementedPoolAPIServer) MakeDir(context.Context, *MakeDirRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDir not implemented")
}
func (UnimplementedPoolAPIServer) RenameDirToDir(context.Context, *RenameDirToDirRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDirToDir not implemented")
}
func (UnimplementedPoolAPIServer) RenameFileToFile(context.Context, *RenameFileToFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFileToFile not implemented")
}
func (UnimplementedPoolAPIServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedPoolAPIServer) OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedPoolAPIServer) TruncateFile(context.Context, *TruncateFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateFile not implemented")
}
func (UnimplementedPoolAPIServer) GetOffset(context.Context, *GetOffsetRequest) (*GetOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffset not implemented")
}
func (UnimplementedPoolAPIServer) ReadAt(context.Context, *ReadAtRequest) (*ReadAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedPoolAPIServer) WriteAt(context.Context, *WriteAtRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteAt not implemented")
}
func (UnimplementedPoolAPIServer) Lock(context.Context, *LockRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedPoolAPIServer) RLock(context.Context, *LockRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RLock not implemented")
}
func (UnimplementedPoolAPIServer) Unlock(context.Context, *UnlockRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedPoolAPIServer) Truncate(context.Context, *TruncateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedPoolAPIServer) Flush(context.Context, *FlushRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedPoolAPIServer) Close(context.Context, *CloseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedPoolAPIServer) SubscribeCacheEvents(context.Context, *SubscribeCacheEventsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeCacheEvents not implemented")
}
func (UnimplementedPoolAPIServer) PullCacheEvents(context.Context, *PullCacheEventsRequest) (*PullCacheEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullCacheEvents not implemented")
}
func (UnimplementedPoolAPIServer) UnsubscribeCacheEvents(context.Context, *UnsubscribeCacheEventsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeCacheEvents not implemented")
}
func (UnimplementedPoolAPIServer) mustEmbedUnimplementedPoolAPIServer() {}

// UnsafePoolAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolAPIServer will
// result in compilation errors.
type UnsafePoolAPIServer interface {
	mustEmbedUnimplementedPoolAPIServer()
}

func RegisterPoolAPIServer(s grpc.ServiceRegistrar, srv PoolAPIServer) {
	s.RegisterService(&PoolAPI_ServiceDesc, srv)
}

func _PoolAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ListXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ListXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ListXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ListXattr(ctx, req.(*ListXattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_GetXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).GetXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/GetXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).GetXattr(ctx, req.(*GetXattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_SetXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetXattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).SetXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/SetXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).SetXattr(ctx, req.(*SetXattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_RemoveXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveXattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).RemoveXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/RemoveXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).RemoveXattr(ctx, req.(*RemoveXattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ExistsDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ExistsDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ExistsDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ExistsDir(ctx, req.(*ExistsDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ExistsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ExistsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ExistsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ExistsFile(ctx, req.(*ExistsFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ListUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ListUserGroups(ctx, req.(*ListUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ListDirACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirACLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ListDirACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ListDirACLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ListDirACLs(ctx, req.(*ListDirACLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ListFileACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileACLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ListFileACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ListFileACLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ListFileACLs(ctx, req.(*ListFileACLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ListACLsForEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListACLsForEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ListACLsForEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ListACLsForEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ListACLsForEntries(ctx, req.(*ListACLsForEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).RemoveFile(ctx, req.(*RemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_RemoveDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).RemoveDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/RemoveDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).RemoveDir(ctx, req.(*RemoveDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_MakeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).MakeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/MakeDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).MakeDir(ctx, req.(*MakeDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_RenameDirToDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirToDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).RenameDirToDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/RenameDirToDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).RenameDirToDir(ctx, req.(*RenameDirToDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_RenameFileToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileToFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).RenameFileToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/RenameFileToFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).RenameFileToFile(ctx, req.(*RenameFileToFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/OpenFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).OpenFile(ctx, req.(*OpenFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_TruncateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).TruncateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/TruncateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).TruncateFile(ctx, req.(*TruncateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_GetOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).GetOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/GetOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).GetOffset(ctx, req.(*GetOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).ReadAt(ctx, req.(*ReadAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_WriteAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).WriteAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/WriteAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).WriteAt(ctx, req.(*WriteAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_RLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).RLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/RLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).RLock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Truncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_SubscribeCacheEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeCacheEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).SubscribeCacheEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/SubscribeCacheEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).SubscribeCacheEvents(ctx, req.(*SubscribeCacheEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_PullCacheEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullCacheEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).PullCacheEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/PullCacheEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).PullCacheEvents(ctx, req.(*PullCacheEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolAPI_UnsubscribeCacheEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeCacheEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolAPIServer).UnsubscribeCacheEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoolAPI/UnsubscribeCacheEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolAPIServer).UnsubscribeCacheEvents(ctx, req.(*UnsubscribeCacheEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoolAPI_ServiceDesc is the grpc.ServiceDesc for PoolAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoolAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PoolAPI",
	HandlerType: (*PoolAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PoolAPI_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PoolAPI_Logout_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PoolAPI_List_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _PoolAPI_Stat_Handler,
		},
		{
			MethodName: "ListXattr",
			Handler:    _PoolAPI_ListXattr_Handler,
		},
		{
			MethodName: "GetXattr",
			Handler:    _PoolAPI_GetXattr_Handler,
		},
		{
			MethodName: "SetXattr",
			Handler:    _PoolAPI_SetXattr_Handler,
		},
		{
			MethodName: "RemoveXattr",
			Handler:    _PoolAPI_RemoveXattr_Handler,
		},
		{
			MethodName: "ExistsDir",
			Handler:    _PoolAPI_ExistsDir_Handler,
		},
		{
			MethodName: "ExistsFile",
			Handler:    _PoolAPI_ExistsFile_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _PoolAPI_ListUserGroups_Handler,
		},
		{
			MethodName: "ListDirACLs",
			Handler:    _PoolAPI_ListDirACLs_Handler,
		},
		{
			MethodName: "ListFileACLs",
			Handler:    _PoolAPI_ListFileACLs_Handler,
		},
		{
			MethodName: "ListACLsForEntries",
			Handler:    _PoolAPI_ListACLsForEntries_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _PoolAPI_RemoveFile_Handler,
		},
		{
			MethodName: "RemoveDir",
			Handler:    _PoolAPI_RemoveDir_Handler,
		},
		{
			MethodName: "MakeDir",
			Handler:    _PoolAPI_MakeDir_Handler,
		},
		{
			MethodName: "RenameDirToDir",
			Handler:    _PoolAPI_RenameDirToDir_Handler,
		},
		{
			MethodName: "RenameFileToFile",
			Handler:    _PoolAPI_RenameFileToFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _PoolAPI_CreateFile_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _PoolAPI_OpenFile_Handler,
		},
		{
			MethodName: "TruncateFile",
			Handler:    _PoolAPI_TruncateFile_Handler,
		},
		{
			MethodName: "GetOffset",
			Handler:    _PoolAPI_GetOffset_Handler,
		},
		{
			MethodName: "ReadAt",
			Handler:    _PoolAPI_ReadAt_Handler,
		},
		{
			MethodName: "WriteAt",
			Handler:    _PoolAPI_WriteAt_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _PoolAPI_Lock_Handler,
		},
		{
			MethodName: "RLock",
			Handler:    _PoolAPI_RLock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _PoolAPI_Unlock_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _PoolAPI_Truncate_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _PoolAPI_Flush_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _PoolAPI_Close_Handler,
		},
		{
			MethodName: "SubscribeCacheEvents",
			Handler:    _PoolAPI_SubscribeCacheEvents_Handler,
		},
		{
			MethodName: "PullCacheEvents",
			Handler:    _PoolAPI_PullCacheEvents_Handler,
		},
		{
			MethodName: "UnsubscribeCacheEvents",
			Handler:    _PoolAPI_UnsubscribeCacheEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/api/api.proto",
}
